using System.Linq;using AutomateToolSwap;using Microsoft.Xna.Framework;using StardewValley;using StardewValley.Characters;using StardewValley.Tools;namespace AutomateToolSwap.SwitchRules{    /// <summary>    /// Implements the switch rule for animals.    /// When near farm animals (for milking, shearing, or feeding), the mod switches to the appropriate tool/item.    /// </summary>    public class AnimalSwapRule : ISwapRule    {        ModConfig config = ModEntry.Config;

        /// <summary>        /// Checks animal-related conditions and switches tools/items accordingly.        /// </summary>        /// <param name="location">The current game location.</param>        /// <param name="tile">The tile being checked.</param>        /// <param name="player">The current player.</param>        /// <returns>True if a switch was performed; otherwise, false.</returns>                                                                                                                                                                                                                                                                                                                                                                                                                           public bool TrySwap(GameLocation location, Vector2 tile, Farmer player)        {            // Only check for animals on a farm or inside an animal house.            if (location is not Farm && location is not AnimalHouse)                return false;            string[] animalsThatCanBeMilked = { "Goat", "Cow" };            string[] animalsThatCanBeSheared = { "Sheep" };            foreach (FarmAnimal animal in location.getAllFarmAnimals())            {                float distanceToAnimal = Vector2.Distance(tile, animal.Tile);                if (config.MilkPailForCowsAndGoats && animalsThatCanBeMilked.Any(animalType => animal.type.Contains(animalType)) &&                    distanceToAnimal <= 1 && animal.currentLocation == player.currentLocation)                {                    ModEntry.SetTool(player, typeof(MilkPail));                    return true;                }                if (config.ShearsForSheeps && animalsThatCanBeSheared.Any(animalType => animal.type.Contains(animalType)) &&                    distanceToAnimal <= 1 && animal.currentLocation == player.currentLocation)                {                    ModEntry.SetTool(player, typeof(Shears));                    return true;                }            }            bool tileIsFeedingBench = location.doesTileHaveProperty((int)tile.X, (int)tile.Y, "Trough", "Back") != null;            if (location is AnimalHouse && tileIsFeedingBench)            {                ModEntry.SetItem(player, "", "Hay", aux: 0);                return true;            }            return false;        }    }}